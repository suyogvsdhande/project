# -*- coding: utf-8 -*-
"""app2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wmMMxHceCIl_i8YJZrfXguAzun5VWOwO
"""

# Step 1: Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score

# Step 2: Load the dataset
# Replace 'diabetic_data.csv' and 'IDS_mapping.csv' with the paths of your uploaded files in Colab
diabetic_data = pd.read_csv('/content/drive/MyDrive/FDS/project/diabetic_data.csv')
ids_mapping = pd.read_csv('/content/drive/MyDrive/FDS/project/IDS_mapping.csv')

# Step 3: Inspect the data
print(diabetic_data.head())
print(diabetic_data.info())
print(diabetic_data.isnull().sum())  # Check for missing values

# Step 4: Clean the data
# Replace '?' with NaN and drop unnecessary columns
diabetic_data.replace('?', np.nan, inplace=True)
diabetic_data.drop(['encounter_id', 'patient_nbr', 'weight', 'payer_code', 'medical_specialty'], axis=1, inplace=True)

# Handle missing values
diabetic_data.fillna(diabetic_data.mode().iloc[0], inplace=True)

# Step 5: Encode categorical variables
# Encode readmitted (target variable) and other categorical features
label_encoders = {}
for column in diabetic_data.select_dtypes(include='object').columns:
    le = LabelEncoder()
    diabetic_data[column] = le.fit_transform(diabetic_data[column])
    label_encoders[column] = le

# Step 6: Split the data into train and test sets
X = diabetic_data.drop('readmitted', axis=1)  # Features
y = diabetic_data['readmitted']  # Target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 7: Train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Step 8: Evaluate the model
y_pred = model.predict(X_test)
# Get probabilities for all classes instead of just the second class
y_pred_proba = model.predict_proba(X_test)

print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# Use 'ovr' for multi-class ROC AUC calculation
print("ROC AUC Score:", roc_auc_score(y_test, y_pred_proba, multi_class='ovr'))

# Step 9: Feature importance
feature_importances = pd.Series(model.feature_importances_, index=X.columns)
feature_importances.nlargest(10).plot(kind='barh')
plt.title("Top 10 Feature Importances")
plt.show()